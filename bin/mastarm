#!/usr/bin/env node

const checkDependencies = require('check-dependencies')
const commander = require('commander')
const path = require('path')

const loadConfig = require('../lib/load-config')
const pkg = require('../lib/pkg')

commander
  .version(require('../package.json').version)
  .usage('<cmd> [options]')
  .option('-c, --config <path>', 'Path to configuration files.', path.join(process.cwd(), '/configurations/default'))
  .option('-C, --check-dependencies', 'Check and install package.json dependencies.', false)
  .option('-e, --env <environment>', 'Environment to use.', process.env.NODE_ENV || 'development')
  .option('-m, --minify', 'Minify built files.', false)
  .option('-p, --proxy <address>', 'Proxy calls through to target address.')
  .option('-s, --serve', 'Serve with budo. Auto-matically rebuilds on changes.', false)
  .option('-w, --watch', 'Rebuild on changes with watchify.', false)

commander
  .command('build [entries...]')
  .description('Bundle JavaScript & CSS')
  .action(function (entries) {
    dependencyCheck()

    const config = loadConfig(process.cwd(), commander.config, commander.env)
    const get = (item, backup) => commander[item] || config.settings[item] || backup
    const files = parseEntries(entries, get)

    if (commander.serve) {
      const budo = require('../lib/budo')
      files.map(budo({
        config,
        proxy: get('proxy')
      }))
    } else {
      const build = require('../lib/build')
      files.map(build({
        config,
        env: get('env'),
        minify: get('minify'),
        watch: get('watch')
      }))
    }
  })

commander
  .command('deploy [entries...]')
  .usage('[entries...] [options]')
  .description('Bundle & Deploy JavaScript & CSS')
  .option('--cloudfront', 'CloudFront Distribution ID to invalidate.')
  .option('--s3bucket', 'S3 Bucket to push to.')
  .action(function (entries) {
    dependencyCheck()

    const pushToS3 = require('../lib/push-to-s3')

    const config = loadConfig(process.cwd(), commander.config, commander.env)
    const get = (item, backup) => commander[item] || config.settings[item] || backup
    const files = parseEntries(entries, get)

    files.map(pushToS3({
      cloudfront: get('cloudfront'),
      config,
      env: get('env'),
      minify: get('minify'),
      s3bucket: get('s3bucket')
    }))
  })

commander
  .command('lint [paths...]')
  .description('Lint JavaScript [& CSS coming soon!]')
  .action(function () {
    dependencyCheck()

    const engine = require('standard-engine')
    const standard = require('standard')

    // get lint out of there
    process.argv.pop()
    // Force verbose
    process.argv.push('--verbose')

    engine.cli(Object.assign({}, standard, {
      cwd: process.cwd(),
      homepage: 'https://github.com/conveyal/mastarm'
    }))
  })

commander.parse(process.argv)

function parseEntries (entries, get) {
  const files = entries.map((entry) => {
    entry = entry.split(':')
    if (entry.length === 1) {
      entry.push(`assets/${entry[0]}`)
    }
    return entry
  })

  if (files.length === 0) {
    files.push([
      get('entry') || pkg.main || 'index.js',
      get('outfile') || 'assets/index.js'
    ])
  }

  return files
}

function dependencyCheck () {
  if (commander.checkDependencies) {
    const results = checkDependencies.sync({ install: true })
    if (results.status !== 0) {
      console.error(results.error)
      process.exit(results.status)
    }
  }
}
