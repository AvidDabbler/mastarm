#!/usr/bin/env node

const commander = require('commander')
const path = require('path')

const loadConfig = require('../lib/load-config')
const pkg = require('../lib/pkg')

commander
  .version(require('../package.json').version)
  .option('-c, --config <path>', 'Path to configuration files.', path.join(process.cwd(), '/configurations/default'))
  .option('-e, --env <environment>', 'Environment to use.', process.env.NODE_ENV || 'development')
  .option('-m, --minify', 'Minify built files.')
  .option('-S, --skip-check-dependencies', 'Skip checking and installing out of date package.json dependencies.')

commander
  .command('build [entries...]')
  .description('Bundle JavaScript & CSS')
  .option('-F, --flyle', 'Cache and serve tiles.')
  .option('-p, --proxy <address>', 'Proxy calls through to target address.')
  .option('-s, --serve', 'Serve with budo. Auto-matically rebuilds on changes.')
  .option('-w, --watch', 'Rebuild on changes with watchify.')
  .action(function (entries, options) {
    checkDependencies()
    const config = loadConfig(process.cwd(), commander.config, commander.env)
    const get = (item) => val([options, commander, config.settings], item)
    const files = parseEntries(entries, get)
    if (get('serve')) {
      const budo = require('../lib/budo')
      files.map(budo({
        config,
        flyle: get('flyle'),
        proxy: get('proxy')
      }))
    } else {
      const build = require('../lib/build')
      files.map(build({
        config,
        env: get('env'),
        minify: get('minify'),
        watch: get('watch')
      }))
    }
  })

commander
  .command('commit')
  .description('Force intelligent commit messages.')
  .action(function () {
    popMastarmFromArgv()
    const path = require('path')
    const bootstrap = require('commitizen/dist/cli/git-cz').bootstrap
    bootstrap({
      cliPath: path.join(__dirname, '../node_modules/commitizen'),
      config: {
        path: 'cz-conventional-changelog'
      }
    })
  })

commander
  .command('deploy [entries...]')
  .description('Bundle & Deploy JavaScript & CSS')
  .option('--cloudfront', 'CloudFront Distribution ID to invalidate.')
  .option('--s3bucket', 'S3 Bucket to push to.')
  .action(function (entries, options) {
    checkDependencies()
    const pushToS3 = require('../lib/push-to-s3')
    const config = loadConfig(process.cwd(), commander.config, commander.env)
    const get = (item) => val([options, commander, config.settings], item)
    const files = parseEntries(entries, get)
    files.map(pushToS3({
      cloudfront: get('cloudfront'),
      config,
      env: get('env'),
      minify: get('minify'),
      s3bucket: get('s3bucket')
    }))
  })

commander
  .command('lint [paths...]')
  .description('Lint JavaScript [& CSS coming soon!]')
  .action(function () {
    const engine = require('standard-engine')
    const standard = require('standard')
    // get lint out of there
    process.argv.pop()
    // Force verbose
    process.argv.push('--verbose')
    engine.cli(Object.assign({}, standard, {
      cwd: process.cwd(),
      homepage: 'https://github.com/conveyal/mastarm'
    }))
  })

commander
  .command('prepublish [entries...]')
  .description('Transpile JavaScript down to ES5 with Babel')
  .action(function (entries) {
    checkDependencies()
    const babel = require('babel-core')
    const fs = require('fs')
    const glob = require('glob')
    const mkdirp = require('mkdirp')
    const outdir = path.join(process.cwd(), 'build')
    const options = {
      presets: [
        require('babel-preset-es2015'),
        require('babel-preset-react'),
        require('babel-preset-stage-0')
      ],
      plugins: [
        require('babel-plugin-add-module-exports'),
        require('babel-plugin-transform-runtime')
      ],
      sourceMaps: true
    }
    entries.forEach((entry) => {
      if (fs.statSync(entry).isDirectory()) {
        transformDir(entry)
      } else {
        transformFile(entry)
      }
    })
    function transformFile (filename) {
      const filepath = path.join(outdir, filename)
      const results = babel.transform(
        fs.readFileSync(filename, 'utf8'),
        Object.assign({}, options, {filename})
      )
      mkdirp.sync(path.dirname(filepath))
      fs.writeFileSync(filepath, results.code + '\n//# sourceMappingURL=' + path.basename(filepath))
      fs.writeFileSync(`${filepath}.map`, JSON.stringify(results.map))
    }
    function transformDir (dir) {
      glob(`${dir}/**/*.js`, (err, files) => {
        if (err) console.error(err)
        files.forEach(transformFile)
      })
    }
  })

commander.parse(process.argv)

function checkDependencies () {
  if (!commander.skipCheckDependencies) {
    const checkDependenciesSync = require('check-dependencies').sync
    const results = checkDependenciesSync({
      install: true,
      packageDir: process.cwd()
    })
    if (results.status !== 0) {
      console.error(results.error)
      process.exit(results.status)
    } else if (!results.depsWereOk) {
      console.log('Updated out of date dependencies found in package.json. Please try running the command again.')
      process.exit(results.status)
    }
  }
}

function parseEntries (entries, get) {
  const files = entries.map((entry) => {
    entry = entry.split(':')
    if (entry.length === 1) {
      entry.push(`assets/${entry[0]}`)
    }
    return entry
  })

  if (files.length === 0) {
    files.push([
      get('entry') || pkg.main || 'index.js',
      get('outfile') || 'assets/index.js'
    ])
  }

  return files
}

/**
 * A lot of subcommands utilize exact argument lengths. Pop mastarm to handle it.
 */
function popMastarmFromArgv () {
  process.argv = process.argv.slice(0, 1).concat(process.argv.slice(2))
}

function val (targets, i) {
  const ts = targets.filter((t) => t[i] !== undefined)
  if (ts.length > 0) return ts[0][i]
}
