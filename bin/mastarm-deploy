#!/usr/bin/env node

const AWS = require('aws-sdk')
const uuid = require('uuid')
const auto = require('../lib/auto')()
const build = require('../lib/build')

auto.files.map(run)

function run ([entry, outfile]) {
  const cloudfrontDistributionID = auto.argv.cloudfront || auto.config.settings.cloudfrontDistributionID
  const s3bucket = auto.argv.bucket || auto.config.settings.s3bucket
  const s3object = new AWS.S3({
    params: {
      ACL: 'public-read',
      Body: build({
        config: auto.config,
        debug: auto.argv.debug,
        entry: entry,
        env: auto.env,
        outfile
      }).bundle(),
      Bucket: s3bucket,
      Key: outfile
    }
  })

  console.log('building and pushing %s to s3 bucket %s', outfile, s3bucket)
  s3object
    .upload()
    .send(function (err, data) {
      if (err) {
        console.error(err.stack)
        process.exit(1)
      } else {
        console.log('finished pushing to s3')

        if (cloudfrontDistributionID) {
          const cf = new AWS.CloudFront()
          console.log('creating invalidation for cf distribution %s at %s', cloudfrontDistributionID, outfile)
          cf.createInvalidation({
            DistributionId: cloudfrontDistributionID,
            InvalidationBatch: {
              CallerReference: uuid.v4(),
              Paths: {
                Quantity: 1,
                Items: [
                  '/' + outfile
                ]
              }
            }
          }, function (err, data) {
            if (err) {
              console.error(err.stack)
              process.exit(1)
            } else {
              console.log('finished deploying')
              process.exit(0)
            }
          })
        } else {
          console.log('finished deploying')
          process.exit(0)
        }
      }
    })
}
